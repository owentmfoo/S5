import os
from typing import Union

import numpy as np
import pandas as pd

from S5.HPC.optimisation import set_mean
from S5.Tecplot import TecplotData, TPHeaderZone, DSWinput, SSHistory


def write_vel(tvel_kph: Union[pd.DataFrame, float, int], outfile=None) -> None:
    """Create Target Velocity files with constant velocity profile.

    Args:
        tvel_kph: Target velocity, or DataFrame of target velocities.
        outfile: Name of the output velocity file.

    Returns:
        None, velocity file is created at the path specified by `outfile`.

    Examples:
        >>> write_vel(70,'TargetVel.dat')
    """

    if outfile is None:
        outfile = "TargetVel.dat"

    vel_file = TecplotData()
    vel_file.zone = TPHeaderZone()
    if type(tvel_kph) is pd.DataFrame:
        assert "Distance(km)" in tvel_kph.columns, "column  \"Distance(km)\" missing from dataframe at S5.HPC.file_io.write_vel"
        assert "TargetVel(km/h)" in tvel_kph.columns, "column  \"TargetVel(km/h)\" missing from dataframe at S5.HPC.file_io.write_vel"
        vel_file.data = tvel_kph[["Distance(km)", "TargetVel(km/h)"]]
        vel_file.update_zone_1d()
    else:
        tvel_kph = float(tvel_kph)
        vel_file.data = pd.DataFrame(np.array([[0, tvel_kph], [3030, tvel_kph]]))
        vel_file.data.columns = ["Distance(km)", "TargetVel(km/h)"]
        vel_file.zone.ni = 2
    vel_file.title = "Velocity file generated by S5.HPC"
    vel_file.zone.zonetitle = "tvel"
    vel_file.write_tecplot(outfile)


# TODO: to refactor as the summary method in the SSHistory class?
def read_history(history_file_path: Union[str, os.PathLike]):
    """Read and return the summary statistics of the history file as a list.

    Args:
        history_file_path: Path to the history file

    Returns:
        A list for statistics in the order of
        `driving_time, dist, soc, avg_vel, Vstd, SoCMax, SoCMin`
    """
    hist_tp = SSHistory(history_file_path)
    # finish time in duration
    # finish SoC
    # check if soc reach 0
    try:
        [driving_time, dist, soc, avg_vel] = hist_tp.data.loc[:, ['DrivingTime(s)', 'Distance(km)', 'BatteryCharge(%)',
                                                                  'AverageCarVel(km/h)']].iloc[-1, :].to_list()
    except KeyError:  # to catch new history file that do not have average car vel col
        [driving_time, dist, soc] = hist_tp.data.loc[:, ['DrivingTime(s)', 'Distance(km)', 'BatteryCharge(%)',
                                                         ]].iloc[-1, :].to_list()
        # recalculate average vel using data in the History file. Note that due to downsampling in History file
        # there will be a small discrepancy between ones previously calculated in SolarSim and this one here
        avg_vel = hist_tp.data.loc[hist_tp.data['Driving'] == 1, "CarVel(km/h)"].mean()

    Vstd = np.std(hist_tp.data[hist_tp.data["Driving"] == 1].loc[:, 'CarVel(km/h)'])
    SoCMax = hist_tp.data.loc[:, 'BatteryCharge(%)'].max()
    SoCMin = hist_tp.data.loc[:, 'BatteryCharge(%)'].min()
    return driving_time, dist, soc, avg_vel, Vstd, SoCMax, SoCMin
    # planned new feature: Named tuple implementation
    # hist_sum = namedtuple('History Summary',['driving_time', 'dist', 'soc', 'avg_vel', 'Vstd', 'SoCMax', 'SoCMin'])
    # return hist_sum(driving_time, dist, soc, avg_vel, Vstd, SoCMax, SoCMin)


def adjust_v(file: TecplotData, v_bar: float):
    """Adjust the mean velocity of the target file such that it is at v_bar.

    Args:
        file: The TecplotData object representing the velocity file.
        v_bar: The new mean velocity.
    """
    # TODO: add clip to pass through to set_mean
    # TODO: should this be moved to be a Target velocity object and adjust velocity method?
    x = file.data['Distance(km)']
    vel = file.data['TargetVel(km/h)']
    vel = set_mean(vel, v_bar, x, 8)
    file.data['TargetVel(km/h)'] = vel


def win2lin(filepath: Union[str, os.PathLike]) -> None:
    r"""Convert DSW input files from windows to linux compatible.

    Reads the input file and overwrites the file with the correct slash
    (from ``\`` to ``/``).

    Args:
        filepath: Path to input file.

    See Also:
        S5.HPC.file_io.lin2win : The reverse operation.
    """
    input_file = DSWinput(filepath)
    input_file.format("lin")
    input_file.write_input(filepath)


def lin2win(filepath: Union[str, os.PathLike]) -> None:
    r"""Convert DSW input files from linus to windows compatible.

    Reads the input file and overwrites the file with the correct slash
    (from ``/`` to ``\``).

    Args:
        filepath: Path to input file.

    See Also:
        S5.HPC.file_io.win2lin : The reverse operation.
    """
    input_file = DSWinput(filepath)
    input_file.format("win")
    input_file.write_input(filepath)


if __name__ == '__main__':  # pragma: no cover
    filename = "TargetVel.dat"
    tvel = 62
    write_vel(tvel, filename)
